import "runtime/print.tan";
import "runtime/debug.tan";

fn work1(a: float, b: float): float {
    return a * b;
}

fn work2(a: int, b: int) : int {
    @test_comp_error(invalid_return_type) {
        return 0.0;
    }
    return a * b / 2;
}

@test_comp_error(func_arg_redeclare) {
    extern fn oops(a: int, a: float) : void;
}

pub fn main(argc: int, argv: char**) : int {
    var a: int = 1;
    assert(a == 1);

    a = work2(a, 2);
    assert(a == 1);

    // implicitly converting a from int to float by calling work1
    a = 2;
    assert(work1(a, 2) == 4.0);
    assert(work1(a, 2.0) == 4.0);

    assert(work1(1.0, 2.) == 2.0);

    @test_comp_error(unknown_func_call) {
        pretend_work(D, 1.0);
    }

    var D: f64 = 2.0;
    @test_comp_error(invalid_arguments_to_func_call) {
        work1(D, 1.0);
    }

    print("SUCCESS\n");
    return 0;
}

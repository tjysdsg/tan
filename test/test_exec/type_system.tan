import "runtime/print.tan";
import "runtime/debug.tan";

@test_comp_error(i32_to_i8) {
    var a: i8 = 32;
}

@test_comp_error(f32_to_i32) {
    var a: i32 = 8.;
}

fn test_implicit_cast() : void {
    // TODO: specify the exact type of a numeric literal: 1.0f32, 1f64, 1u64, ...

    // rule #1
    var signed: i32 = 1 as i16; // i16 -> i32
    assert(signed == 1);
    var unsigned: u32 = 2 as u16; // u16 -> u32
    assert(unsigned == 2u);
    @test_comp_error(int_narrowing) {
        var a: i16 = signed;
        var b: u16 = unsigned;
    }

    // rule #2
    signed = 5 as u16; // u16 -> i32
    assert(signed == 5 as i64); // (u32 and i64) -> i64
    @test_comp_error(u64_to_i32) {
        signed = 5 as u64;
    }

    // rule #3
    unsigned = 4 as i16; // i16 -> u32
    assert(unsigned == 4 as i16); // (u32 and i16) -> u32
    @test_comp_error(i64_to_u32) {
        unsigned = -1 as i64;
    }

    // negative of rule #1,2,3
    @test_comp_error(cannot_auto_promote_same_size_diff_sign) {
        assert(signed == 1u);
    }

    // rule #4
    var f: f32 = 1.0;
    var d: f64 = 2.0;
    d = f; // f32 -> f64
    assert(d == 1.0 as f64); // (f32 and f64) -> f64
    @test_comp_error(f64_to_f32) {
        f = d;
    }

    // rule #5
    signed = -5;
    unsigned = 5u;
    f = signed; // i32 -> f32
    assert(f == -5.0);
    d = unsigned; // u32 -> f64
    assert(d == 5.0);
    d = signed; // i32 -> f64
    assert(d == -5.0);
    assert(d == signed); // (f64 and i32) -> f64
    d = unsigned;
    assert(unsigned == d); // (u32 and f64) -> f64
    @test_comp_error(float_to_int) {
        signed = f;
    }

    // rule #6
    signed = true;
    assert(signed);
    assert(signed == 1);
    signed = false;
    assert(!signed);
    assert(signed == 0);

    f = true;
    assert(f);
    assert(f == 1.0);
    f = false;
    assert(!f);
    assert(f == 0);

    // rule #7
    signed = 99;
    assert(signed);
    f = 2.5;
    assert(f);
    d = 1.0;
    assert(d);

    var pi = &signed;
    var pf = &f;
    assert(pi);
    assert(pf);

    assert(f && true); // (f32 and bool) -> bool
    assert(signed && true); // (i32 and bool) -> bool
    assert(pi && true); // (i32* and bool) -> bool
    assert(pf && true); // (f32* and bool) -> bool

    // TODO: add tests for rule #8 and #9
}

pub fn main() : int {
    var a1: i32 = 100;
    assert(a1 == 100);
    var a2: u32 = a1 as u32;
    assert(a2 == 100 as u32);
    assert(a2 == 100u);
    var a3: u8 = a2 as u8;
    assert(a3 == 100 as u8);
    var a4: i8 = a3 as i8;
    assert(a4 == 100 as i8);
    assert(a4 == 100.0 as i8);
    var a5: i32 = a4 as i32;
    assert(a5 == 100);
    var a6: f32 = a5 as float;
    assert(a6 == 100.0);
    var a7: f64 = a6 as f64;
    assert(a7 as f32 == 100.0);
    a7 = a5 as f64;
    assert(a7 == 100 as f64);
    var c: char = a7 as char;
    assert(c == 100);

    // truncate
    c = -1 as char;
    assert(c as u32 == 255u);

    // signed ext
    var i: i32 = -100;
    var big: i64 = i;
    assert(big == -100);

    // float and signed/unsigned int
    var fp: float = -1.0 as f32;
    assert(fp as int == -1);
    assert(fp as u32 == 4294967295u); // underflow
    assert(fp as bool);

    // arrays
    var array1: i32[3] = [0, 1, 2];
    var parray1: i32* = &array1[0];
    assert(*parray1 == array1[0]);

    // string to pointer
    var s = "abc";
    var sp = s as char*;
    assert(sp[0] == 'a');
    assert(sp[1] == 'b');
    assert(sp[2] == 'c');
    assert(sp[3] == 0 as char);

    test_implicit_cast();
    print("SUCCESS\n");
    return 0;
}

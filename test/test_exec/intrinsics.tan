import "runtime/print.tan";
import "runtime/debug.tan";
import "runtime/stdlib.tan";

pub fn main(argc: int, argv: char**) : int {
    @compprint("main function starts");

    // assert(@file == "intrinsics.tan");  // TODO: string comparison
    print("\nSource filename is:");
    print(@file);

    assert(@line == 12u);

    print("\nSource code of variable argc is:");
    print(@get_decl(argc));

    @stack_trace();

    @test_comp_error(invalid_intrinsic_func_call) {
        @stack_trace;
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @stack_trace(100);
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @get_decl();
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @get_decl(var a = 10);
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @get_decl(i32);
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @compprint();
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @compprint(jdjd);
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @compprint(1);
    }
    @test_comp_error(invalid_intrinsic_func_call) {
        @compprint("hi", "hello");
    }

    @noop();

    print("SUCCESS\n");
    @compprint("main function ends");
    return 0;
}

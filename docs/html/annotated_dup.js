var annotated_dup =
[
    [ "llvm", null, [
      [ "yaml", null, [
        [ "MappingTraits< UnsavedFileHash >", "structllvm_1_1yaml_1_1MappingTraits_3_01UnsavedFileHash_01_4.html", "structllvm_1_1yaml_1_1MappingTraits_3_01UnsavedFileHash_01_4" ],
        [ "MappingTraits< ClangInvocationInfo >", "structllvm_1_1yaml_1_1MappingTraits_3_01ClangInvocationInfo_01_4.html", "structllvm_1_1yaml_1_1MappingTraits_3_01ClangInvocationInfo_01_4" ]
      ] ]
    ] ],
    [ "tanlang", null, [
      [ "ScopeGuard", "classtanlang_1_1ScopeGuard.html", "classtanlang_1_1ScopeGuard" ],
      [ "ParserImpl", "classtanlang_1_1ParserImpl.html", "classtanlang_1_1ParserImpl" ],
      [ "SemanticAnalysisAction", "classtanlang_1_1SemanticAnalysisAction.html", "classtanlang_1_1SemanticAnalysisAction" ],
      [ "OrganizePackages", "classtanlang_1_1OrganizePackages.html", "classtanlang_1_1OrganizePackages" ],
      [ "RegisterDeclarations", "classtanlang_1_1RegisterDeclarations.html", "classtanlang_1_1RegisterDeclarations" ],
      [ "ScanImports", "classtanlang_1_1ScanImports.html", "classtanlang_1_1ScanImports" ],
      [ "TypeCheck", "classtanlang_1_1TypeCheck.html", "classtanlang_1_1TypeCheck" ],
      [ "TypePrecheck", "classtanlang_1_1TypePrecheck.html", "classtanlang_1_1TypePrecheck" ],
      [ "ASTBase", "classtanlang_1_1ASTBase.html", "classtanlang_1_1ASTBase" ],
      [ "ASTNamed", "classtanlang_1_1ASTNamed.html", "classtanlang_1_1ASTNamed" ],
      [ "Context", "classtanlang_1_1Context.html", "classtanlang_1_1Context" ],
      [ "Decl", "classtanlang_1_1Decl.html", "classtanlang_1_1Decl" ],
      [ "VarDecl", "classtanlang_1_1VarDecl.html", "classtanlang_1_1VarDecl" ],
      [ "ArgDecl", "classtanlang_1_1ArgDecl.html", "classtanlang_1_1ArgDecl" ],
      [ "FunctionDecl", "classtanlang_1_1FunctionDecl.html", "classtanlang_1_1FunctionDecl" ],
      [ "TypeDecl", "classtanlang_1_1TypeDecl.html", "classtanlang_1_1TypeDecl" ],
      [ "StructDecl", "classtanlang_1_1StructDecl.html", "classtanlang_1_1StructDecl" ],
      [ "DefaultValue", "classtanlang_1_1DefaultValue.html", "classtanlang_1_1DefaultValue" ],
      [ "Expr", "classtanlang_1_1Expr.html", "classtanlang_1_1Expr" ],
      [ "Literal", "classtanlang_1_1Literal.html", "classtanlang_1_1Literal" ],
      [ "BoolLiteral", "classtanlang_1_1BoolLiteral.html", "classtanlang_1_1BoolLiteral" ],
      [ "IntegerLiteral", "classtanlang_1_1IntegerLiteral.html", "classtanlang_1_1IntegerLiteral" ],
      [ "FloatLiteral", "classtanlang_1_1FloatLiteral.html", "classtanlang_1_1FloatLiteral" ],
      [ "StringLiteral", "classtanlang_1_1StringLiteral.html", "classtanlang_1_1StringLiteral" ],
      [ "CharLiteral", "classtanlang_1_1CharLiteral.html", "classtanlang_1_1CharLiteral" ],
      [ "ArrayLiteral", "classtanlang_1_1ArrayLiteral.html", "classtanlang_1_1ArrayLiteral" ],
      [ "NullPointerLiteral", "classtanlang_1_1NullPointerLiteral.html", "classtanlang_1_1NullPointerLiteral" ],
      [ "VarRef", "classtanlang_1_1VarRef.html", "classtanlang_1_1VarRef" ],
      [ "Identifier", "classtanlang_1_1Identifier.html", "classtanlang_1_1Identifier" ],
      [ "BinaryOperator", "classtanlang_1_1BinaryOperator.html", "classtanlang_1_1BinaryOperator" ],
      [ "MemberAccess", "classtanlang_1_1MemberAccess.html", "classtanlang_1_1MemberAccess" ],
      [ "UnaryOperator", "classtanlang_1_1UnaryOperator.html", "classtanlang_1_1UnaryOperator" ],
      [ "BinaryOrUnary", "classtanlang_1_1BinaryOrUnary.html", "classtanlang_1_1BinaryOrUnary" ],
      [ "Parenthesis", "classtanlang_1_1Parenthesis.html", "classtanlang_1_1Parenthesis" ],
      [ "FunctionCall", "classtanlang_1_1FunctionCall.html", "classtanlang_1_1FunctionCall" ],
      [ "Assignment", "classtanlang_1_1Assignment.html", "classtanlang_1_1Assignment" ],
      [ "Cast", "classtanlang_1_1Cast.html", "classtanlang_1_1Cast" ],
      [ "Intrinsic", "classtanlang_1_1Intrinsic.html", "classtanlang_1_1Intrinsic" ],
      [ "TestCompError", "classtanlang_1_1TestCompError.html", "classtanlang_1_1TestCompError" ],
      [ "Package", "classtanlang_1_1Package.html", "classtanlang_1_1Package" ],
      [ "TokenSpan", "classtanlang_1_1TokenSpan.html", "classtanlang_1_1TokenSpan" ],
      [ "SourceTraceable", "classtanlang_1_1SourceTraceable.html", "classtanlang_1_1SourceTraceable" ],
      [ "Stmt", "classtanlang_1_1Stmt.html", "classtanlang_1_1Stmt" ],
      [ "CompoundStmt", "classtanlang_1_1CompoundStmt.html", "classtanlang_1_1CompoundStmt" ],
      [ "Program", "classtanlang_1_1Program.html", "classtanlang_1_1Program" ],
      [ "Return", "classtanlang_1_1Return.html", "classtanlang_1_1Return" ],
      [ "Import", "classtanlang_1_1Import.html", "classtanlang_1_1Import" ],
      [ "BreakContinue", "classtanlang_1_1BreakContinue.html", "classtanlang_1_1BreakContinue" ],
      [ "Break", "classtanlang_1_1Break.html", "classtanlang_1_1Break" ],
      [ "Continue", "classtanlang_1_1Continue.html", "classtanlang_1_1Continue" ],
      [ "Loop", "classtanlang_1_1Loop.html", "classtanlang_1_1Loop" ],
      [ "If", "classtanlang_1_1If.html", "classtanlang_1_1If" ],
      [ "PackageDecl", "classtanlang_1_1PackageDecl.html", "classtanlang_1_1PackageDecl" ],
      [ "Type", "classtanlang_1_1Type.html", "classtanlang_1_1Type" ],
      [ "PrimitiveType", "classtanlang_1_1PrimitiveType.html", "classtanlang_1_1PrimitiveType" ],
      [ "PointerType", "classtanlang_1_1PointerType.html", "classtanlang_1_1PointerType" ],
      [ "ArrayType", "classtanlang_1_1ArrayType.html", "classtanlang_1_1ArrayType" ],
      [ "StringType", "classtanlang_1_1StringType.html", "classtanlang_1_1StringType" ],
      [ "StructType", "classtanlang_1_1StructType.html", "classtanlang_1_1StructType" ],
      [ "FunctionType", "classtanlang_1_1FunctionType.html", "classtanlang_1_1FunctionType" ],
      [ "TypeRef", "classtanlang_1_1TypeRef.html", "classtanlang_1_1TypeRef" ],
      [ "Typed", "classtanlang_1_1Typed.html", "classtanlang_1_1Typed" ],
      [ "CompileException", "classtanlang_1_1CompileException.html", "classtanlang_1_1CompileException" ],
      [ "Error", "classtanlang_1_1Error.html", "classtanlang_1_1Error" ],
      [ "CodeGenerator", "classtanlang_1_1CodeGenerator.html", "classtanlang_1_1CodeGenerator" ],
      [ "ASTVisitor", "classtanlang_1_1ASTVisitor.html", "classtanlang_1_1ASTVisitor" ],
      [ "CompilerAction", "classtanlang_1_1CompilerAction.html", "classtanlang_1_1CompilerAction" ],
      [ "DependencyGraph", "classtanlang_1_1DependencyGraph.html", "classtanlang_1_1DependencyGraph" ],
      [ "CompilerDriver", "classtanlang_1_1CompilerDriver.html", "classtanlang_1_1CompilerDriver" ],
      [ "Linker", "classtanlang_1_1Linker.html", "classtanlang_1_1Linker" ],
      [ "Parser", "classtanlang_1_1Parser.html", "classtanlang_1_1Parser" ],
      [ "SourceFile", "classtanlang_1_1SourceFile.html", "classtanlang_1_1SourceFile" ],
      [ "SrcLoc", "classtanlang_1_1SrcLoc.html", "classtanlang_1_1SrcLoc" ],
      [ "SourceSpan", "classtanlang_1_1SourceSpan.html", "classtanlang_1_1SourceSpan" ],
      [ "Token", "classtanlang_1_1Token.html", "classtanlang_1_1Token" ],
      [ "TokenizedSourceFile", "classtanlang_1_1TokenizedSourceFile.html", "classtanlang_1_1TokenizedSourceFile" ],
      [ "TanCompilation", "structtanlang_1_1TanCompilation.html", "structtanlang_1_1TanCompilation" ]
    ] ],
    [ "PairHash", "structPairHash.html", "structPairHash" ]
];